"""
All Questions Viewer - Shows both real and generated questions
Simple interface to view all questions at once
"""
import streamlit as st
import json
import os
import time
from typing import List, Dict, Any

# Set page config
st.set_page_config(
    page_title="üìö All Questions Viewer",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
    }
    .question-box {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 8px;
        margin: 15px 0;
        border: 1px solid #e0e0e0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .real-matura-tag {
        background-color: #e8f4fd;
        color: #1f77b4;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
        display: inline-block;
        margin: 5px 0;
    }
    .generated-tag {
        background-color: #f0f8e8;
        color: #2e7d32;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
        display: inline-block;
        margin: 5px 0;
    }
    .question-number {
        font-size: 18px;
        font-weight: bold;
        color: #1f77b4;
        margin-bottom: 10px;
    }
    .question-text {
        font-size: 16px;
        line-height: 1.5;
        margin-bottom: 15px;
    }
    .options {
        margin: 10px 0;
    }
    .option {
        margin: 5px 0;
        padding: 5px 0;
    }
    .correct-answer {
        background-color: #d4edda;
        color: #155724;
        padding: 8px;
        border-radius: 4px;
        margin: 10px 0;
        border-left: 4px solid #28a745;
    }
</style>
""", unsafe_allow_html=True)

def load_real_questions():
    """Load real matura questions from JSON files"""
    questions = []
    
    json_files = [
        "data/matura_21_05_2025.json",
        "data/matura_2025_avgust.json"
    ]
    
    for file_path in json_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data, list):
                    questions.extend(data)
                elif isinstance(data, dict) and 'questions' in data:
                    questions.extend(data['questions'])
                else:
                    questions.append(data)
        except Exception as e:
            st.error(f"‚ùå Error loading {file_path}: {e}")
    
    # Remove duplicates from real questions too
    unique_questions = []
    seen_questions = set()
    
    for q in questions:
        # Create a unique identifier for the question
        question_text = q.get('question', '').strip().lower()
        options = sorted([opt.strip().lower() for opt in q.get('options', [])])
        question_id = f"{question_text}_{'_'.join(options)}"
        
        if question_id not in seen_questions:
            seen_questions.add(question_id)
            unique_questions.append(q)
    
    return unique_questions

def load_generated_questions():
    """Load generated questions from the question generator"""
    try:
        # Import the question generator
        import sys
        sys.path.append('src')
        from src.question_generator import DZIQuestionGenerator, SubjectArea
        
        # Create generator and generate some questions
        generator = DZIQuestionGenerator()
        
        # Generate some questions for each subject
        generated_questions = []
        
        # Generate Bulgarian Language questions
        language_questions = generator.generate_questions(count=10, subject=SubjectArea.LANGUAGE)
        for q in language_questions:
            generated_questions.append({
                'question': q.question_text,
                'options': q.options,
                'correct_answer': q.correct_answer,
                'subject': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫',
                'difficulty': q.difficulty,
                'points': q.points,
                'type': 'multiple_choice'
            })
        
        # Generate Literature questions
        literature_questions = generator.generate_questions(count=10, subject=SubjectArea.LITERATURE)
        for q in literature_questions:
            generated_questions.append({
                'question': q.question_text,
                'options': q.options,
                'correct_answer': q.correct_answer,
                'subject': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                'difficulty': q.difficulty,
                'points': q.points,
                'type': 'multiple_choice'
            })
        
        return generated_questions
        
    except Exception as e:
        st.error(f"‚ùå Error generating questions: {e}")
        return []

def display_question(question, index, question_type="real", show_checkboxes=True):
    """Display a single question with proper formatting"""
    with st.container():
        st.markdown(f"""
        <div class="question-box">
            <div class="question-number">–í—ä–ø—Ä–æ—Å {index + 1}</div>
            <div class="question-text"><strong>{question.get('question', 'N/A')}</strong></div>
        </div>
        """, unsafe_allow_html=True)
        
        # Show question type tag
        if question_type == "real":
            st.markdown('<div class="real-matura-tag">üìö –†–µ–∞–ª–Ω–∞ –º–∞—Ç—É—Ä–∞</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="generated-tag">ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω</div>', unsafe_allow_html=True)
        
        # Display options with checkboxes if available
        if question.get('options') and show_checkboxes:
            st.markdown("**–ò–∑–±–µ—Ä–µ—Ç–µ –æ—Ç–≥–æ–≤–æ—Ä:**")
            selected_options = []
            
            for j, option in enumerate(question['options']):
                # Create a simple but unique key
                unique_key = f"option_{question_type}_{index}_{j}_{int(time.time() * 1000000) % 1000000}"
                
                if st.checkbox(f"{option}", key=unique_key):
                    selected_options.append(option)
            
            # Automatic answer checking when option is selected
            if selected_options:
                # Check if selected answer is correct
                if question.get('correct_answer') in selected_options:
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!")
                else:
                    st.error("‚ùå –ì—Ä–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!")
                    if question.get('correct_answer'):
                        st.markdown(f"**–ü—Ä–∞–≤–∏–ª–Ω–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä –µ:** {question['correct_answer']}")
        elif question.get('options'):
            st.markdown("**–û–ø—Ü–∏–∏:**")
            for j, option in enumerate(question['options']):
                st.markdown(f"**{chr(65+j)}.** {option}")
        
        # Display correct answer if not using checkboxes
        if question.get('correct_answer') and not show_checkboxes:
            st.markdown(f"""
            <div class="correct-answer">
                <strong>–ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä:</strong> {question['correct_answer']}
            </div>
            """, unsafe_allow_html=True)
        
        # Display metadata
        if question.get('subject'):
            st.markdown(f"**–ü—Ä–µ–¥–º–µ—Ç:** {question['subject']}")
        
        if question.get('difficulty'):
            st.markdown(f"**–¢—Ä—É–¥–Ω–æ—Å—Ç:** {question['difficulty']}")
        
        if question.get('points'):
            st.markdown(f"**–¢–æ—á–∫–∏:** {question['points']}")
        
        st.markdown("---")

def main():
    st.markdown('<h1 class="main-header">üìö –í—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏ - –†–µ–∞–ª–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏</h1>', unsafe_allow_html=True)
    
    # Initialize session state
    if 'real_questions' not in st.session_state:
        st.session_state.real_questions = []
    if 'generated_questions' not in st.session_state:
        st.session_state.generated_questions = []
    
    # Auto-load data on first run
    if not st.session_state.real_questions:
        # Try to load saved state first
        try:
            import json
            with open('app_state.json', 'r', encoding='utf-8') as f:
                state_data = json.load(f)
            st.session_state.real_questions = state_data.get('real_questions', [])
            st.session_state.generated_questions = state_data.get('generated_questions', [])
            st.success(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–æ –∑–∞–ø–∞–∑–µ–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ: {len(st.session_state.real_questions)} —Ä–µ–∞–ª–Ω–∏, {len(st.session_state.generated_questions)} –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
        except:
            # If no saved state, load real questions
            with st.spinner("–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏..."):
                st.session_state.real_questions = load_real_questions()
                st.success(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {len(st.session_state.real_questions)} —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
    
    if not st.session_state.generated_questions:
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏..."):
            try:
                import sys
                sys.path.append('src')
                from src.question_generator import DZIQuestionGenerator, SubjectArea
                
                generator = DZIQuestionGenerator()
                
                # Generate some initial questions
                language_questions = generator.generate_questions(count=10, subject=SubjectArea.LANGUAGE)
                literature_questions = generator.generate_questions(count=10, subject=SubjectArea.LITERATURE)
                
                # Convert to dict format
                initial_questions = []
                for q in language_questions:
                    initial_questions.append({
                        'question': q.question_text,
                        'options': q.options,
                        'correct_answer': q.correct_answer,
                        'subject': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫',
                        'difficulty': q.difficulty,
                        'points': q.points,
                        'type': 'multiple_choice'
                    })
                
                for q in literature_questions:
                    initial_questions.append({
                        'question': q.question_text,
                        'options': q.options,
                        'correct_answer': q.correct_answer,
                        'subject': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                        'difficulty': q.difficulty,
                        'points': q.points,
                        'type': 'multiple_choice'
                    })
                
                st.session_state.generated_questions = initial_questions
                st.success(f"‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ {len(initial_questions)} –Ω–∞—á–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–º –Ω–∞—á–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏: {e}")
                st.session_state.generated_questions = []
    
    # Sidebar controls
    with st.sidebar:
        st.header("üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–∏")
        
        # Generate more questions
        st.subheader("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–∞–π –Ω–æ–≤–∏ –≤—ä–ø—Ä–æ—Å–∏")
        num_language = st.number_input("–ë—Ä–æ–π –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –µ–∑–∏–∫:", min_value=1, max_value=50, value=10, key="num_language")
        num_literature = st.number_input("–ë—Ä–æ–π –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞:", min_value=1, max_value=50, value=10, key="num_literature")
        
        # Generation method selection
        generation_method = st.selectbox(
            "–ú–µ—Ç–æ–¥ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ:",
            ["–ë–∞–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "RAG –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (Phase 2)"],
            key="generation_method"
        )
        
        if st.button("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–∞–π –Ω–æ–≤–∏ –≤—ä–ø—Ä–æ—Å–∏", key="generate_new"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏ –≤—ä–ø—Ä–æ—Å–∏..."):
                try:
                    import sys
                    sys.path.append('src')
                    from src.question_generator import DZIQuestionGenerator, SubjectArea
                    
                    generator = DZIQuestionGenerator()
                    
                    if generation_method == "RAG –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (Phase 2)":
                        # Try to use simple RAG generator
                        try:
                            from src.simple_rag_generator import SimpleRAGGenerator
                            rag_generator = SimpleRAGGenerator()
                            
                            # Generate new questions using RAG
                            new_language_questions = rag_generator.generate_questions(count=num_language, subject=SubjectArea.LANGUAGE)
                            new_literature_questions = rag_generator.generate_questions(count=num_literature, subject=SubjectArea.LITERATURE)
                            
                            st.success("üß† –ò–∑–ø–æ–ª–∑–≤–∞–º RAG –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (Phase 2) —Å OpenAI API!")
                            
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è RAG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ä—Ç –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω: {e}")
                            st.info("üîÑ –ò–∑–ø–æ–ª–∑–≤–∞–º –±–∞–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
                            
                            # Fallback to basic generator
                            new_language_questions = generator.generate_questions(count=num_language, subject=SubjectArea.LANGUAGE)
                            new_literature_questions = generator.generate_questions(count=num_literature, subject=SubjectArea.LITERATURE)
                    else:
                        # Use basic generator
                        new_language_questions = generator.generate_questions(count=num_language, subject=SubjectArea.LANGUAGE)
                        new_literature_questions = generator.generate_questions(count=num_literature, subject=SubjectArea.LITERATURE)
                    
                    # Convert to dict format
                    new_questions = []
                    
                    # Handle RAG generator output (already dictionaries)
                    if generation_method == "RAG –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (Phase 2)":
                        # RAG generator returns dictionaries directly
                        for q in new_language_questions:
                            q['subject'] = '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫'
                            new_questions.append(q)
                        
                        for q in new_literature_questions:
                            q['subject'] = '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'
                            new_questions.append(q)
                    else:
                        # Basic generator returns objects with attributes
                        for q in new_language_questions:
                            new_questions.append({
                                'question': q.question_text,
                                'options': q.options,
                                'correct_answer': q.correct_answer,
                                'subject': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫',
                                'difficulty': q.difficulty,
                                'points': q.points,
                                'type': 'multiple_choice'
                            })
                        
                        for q in new_literature_questions:
                            new_questions.append({
                                'question': q.question_text,
                                'options': q.options,
                                'correct_answer': q.correct_answer,
                                'subject': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                                'difficulty': q.difficulty,
                                'points': q.points,
                                'type': 'multiple_choice'
                            })
                    
                    # Add to existing generated questions (avoid duplicates)
                    if 'generated_questions' not in st.session_state:
                        st.session_state.generated_questions = []
                    
                    # Check for duplicates before adding (by question text AND options)
                    def is_duplicate_question(new_q, existing_questions):
                        """Check if question is duplicate by comparing question text and options"""
                        for existing_q in existing_questions:
                            # Compare question text
                            if new_q.get('question', '').strip().lower() == existing_q.get('question', '').strip().lower():
                                # Compare options if they exist
                                new_options = new_q.get('options', [])
                                existing_options = existing_q.get('options', [])
                                if len(new_options) == len(existing_options):
                                    # Check if all options match (order doesn't matter)
                                    new_options_sorted = sorted([opt.strip().lower() for opt in new_options])
                                    existing_options_sorted = sorted([opt.strip().lower() for opt in existing_options])
                                    if new_options_sorted == existing_options_sorted:
                                        return True
                        return False
                    
                    unique_new_questions = []
                    skipped_count = 0
                    
                    for new_q in new_questions:
                        if not is_duplicate_question(new_q, st.session_state.generated_questions):
                            unique_new_questions.append(new_q)
                        else:
                            skipped_count += 1
                    
                    st.session_state.generated_questions.extend(unique_new_questions)
                    
                    # Add generated questions to RAG database for future context
                    if generation_method == "RAG –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ (Phase 2)":
                        try:
                            # Add questions to RAG database
                            rag_generator.add_questions_to_database(unique_new_questions)
                            st.info("üß† –ù–æ–≤–æ–≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏—Ç–µ –≤—ä–ø—Ä–æ—Å–∏ —Å–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –≤—ä–≤ –≤–µ–∫—Ç–æ—Ä–Ω–∞—Ç–∞ –±–∞–∑–∞!")
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ –¥–æ–±–∞–≤—è –≤—ä–ø—Ä–æ—Å–∏—Ç–µ –≤—ä–≤ –≤–µ–∫—Ç–æ—Ä–Ω–∞—Ç–∞ –±–∞–∑–∞: {e}")
                    
                    st.success(f"‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ {len(unique_new_questions)} –Ω–æ–≤–∏ —É–Ω–∏–∫–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏!")
                    if skipped_count > 0:
                        st.info(f"‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä–∞–Ω–∏ {skipped_count} –¥—É–±–ª–∏—Ä–∞—â–∏ —Å–µ –≤—ä–ø—Ä–æ—Å–∏ (–µ–¥–Ω–∞–∫–≤–∏ —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ü–∏–∏)")
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ: {e}")
        
        st.markdown("---")
        
        # Load real questions
        if st.button("üìö –ó–∞—Ä–µ–¥–∏ —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏", key="load_real"):
            with st.spinner("–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏..."):
                st.session_state.real_questions = load_real_questions()
                st.success(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {len(st.session_state.real_questions)} —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
                st.rerun()
        
        # Clear all questions
        if st.button("üóëÔ∏è –ò–∑—á–∏—Å—Ç–∏ –≤—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏", key="clear_all"):
            st.session_state.real_questions = []
            st.session_state.generated_questions = []
            st.success("‚úÖ –í—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏ –∏–∑—á–∏—Å—Ç–µ–Ω–∏")
            st.rerun()
        
        # Save/Load state
        st.markdown("---")
        st.subheader("üíæ –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ")
        
        if st.button("üíæ –ó–∞–ø–∞–∑–∏ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ", key="save_state"):
            try:
                import json
                state_data = {
                    'real_questions': st.session_state.real_questions,
                    'generated_questions': st.session_state.generated_questions
                }
                with open('app_state.json', 'w', encoding='utf-8') as f:
                    json.dump(state_data, f, ensure_ascii=False, indent=2)
                st.success("‚úÖ –°—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –µ –∑–∞–ø–∞–∑–µ–Ω–æ –≤ app_state.json")
            except Exception as e:
                st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: {e}")
        
        if st.button("üìÇ –ó–∞—Ä–µ–¥–∏ –∑–∞–ø–∞–∑–µ–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ", key="load_state"):
            try:
                import json
                with open('app_state.json', 'r', encoding='utf-8') as f:
                    state_data = json.load(f)
                st.session_state.real_questions = state_data.get('real_questions', [])
                st.session_state.generated_questions = state_data.get('generated_questions', [])
                st.success("‚úÖ –°—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –µ –∑–∞—Ä–µ–¥–µ–Ω–æ –æ—Ç app_state.json")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ: {e}")
    
    # Load questions
    if st.button("üîÑ –ó–∞—Ä–µ–¥–∏ –≤—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏", key="load_all"):
        with st.spinner("–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏..."):
            st.session_state.real_questions = load_real_questions()
            st.session_state.generated_questions = load_generated_questions()
            
            total_real = len(st.session_state.real_questions)
            total_generated = len(st.session_state.generated_questions)
            
            st.success(f"‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ {total_real} —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏ –∏ {total_generated} –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
    
    if not st.session_state.real_questions and not st.session_state.generated_questions:
        st.info("üëÜ –ù–∞—Ç–∏—Å–Ω–∏ '–ó–∞—Ä–µ–¥–∏ –≤—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏' –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—à")
        return
    
    # Create tabs
    tab1, tab2, tab3 = st.tabs(["üìö –í—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏", "üéØ –†–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏", "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏"])
    
    with tab1:
        st.header("üìö –í—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏")
        
        all_questions = []
        question_types = []
        
        # Add real questions
        for i, question in enumerate(st.session_state.real_questions):
            all_questions.append(question)
            question_types.append("real")
        
        # Add generated questions
        for i, question in enumerate(st.session_state.generated_questions):
            all_questions.append(question)
            question_types.append("generated")
        
        if all_questions:
            st.markdown(f"**–û–±—â–æ –≤—ä–ø—Ä–æ—Å–∏:** {len(all_questions)}")
            
            # Display all questions
            for i, (question, q_type) in enumerate(zip(all_questions, question_types)):
                display_question(question, i, q_type, show_checkboxes=True)
        else:
            st.warning("–ù—è–º–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
    
    with tab2:
        st.header("üéØ –†–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
        
        if st.session_state.real_questions:
            st.markdown(f"**–ë—Ä–æ–π —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏:** {len(st.session_state.real_questions)}")
            
            for i, question in enumerate(st.session_state.real_questions):
                display_question(question, i, "real", show_checkboxes=True)
        else:
            st.warning("–ù—è–º–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ —Ä–µ–∞–ª–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
    
    with tab3:
        st.header("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
        
        if st.session_state.generated_questions:
            st.markdown(f"**–ë—Ä–æ–π –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏:** {len(st.session_state.generated_questions)}")
            
            for i, question in enumerate(st.session_state.generated_questions):
                display_question(question, i, "generated", show_checkboxes=True)
        else:
            st.warning("–ù—è–º–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; font-size: 14px;">
        üìö Bulgarian DZI Question Generator - All Questions Viewer
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
